apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: chunk-func-controller
    app.kubernetes.io/part-of: chunk-func-controller
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: chunk-func-controller
    app.kubernetes.io/part-of: chunk-func-controller
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      securityContext:
        runAsNonRoot: true
        # For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: manager
        command:
        - /manager
        args:
        - --leader-elect
        image: controller:latest
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 64Mi
        env:
          # RESOURCE_PROFILES can be either "AWS" or "GCF"
          # - GCF resembles the eight Google Cloud Function profiles in the range 128MB - 16384MB
          # - AWS resembles the 159 profiles resulting from dividing the 128MB - 10240MB continuous range of AWS profiles into discrete 64MB steps.
          - name: RESOURCE_PROFILES
            value: AWS

          # FUNCTION_TRIGGER can be either "REST" or "MockedResults"
          # - REST triggers the serverless function using a REST call.
          # - MockedResults replays the results from the `../config/mockedresults` directory.
          - name: FUNCTION_TRIGGER
            value: REST

          # PROFILER can be either "Exhaustive" or "BayesianOpt"
          # - Exhaustive profiles all input sizes with all available resource profiles.
          # - BayesianOpt uses Bayesian Optimization to build a prediction model of the function's
          #   behavior under all resource profiles about 1/4 - 1/3 of the profiling runs.
          - name: PROFILER
            value: BayesianOpt

          # The number of profiling iterations that should be done for each resource profile and input size combination/configuration.
          - name: ITERATIONS_PER_CONFIGURATION
            value: '5'

          # The number resource profiles that should be evaluated concurrently.
          - name: CONCURRENT_PROFILES
            value: '2'

          # The address of the BO server.
          # This normally does not need to be changed, because the BO server is deployed in the same pod as the profiler.
          - name: BAYESIAN_OPT_SERVER
            value: localhost:9000

          # The minimum number of samples that will be collected by BO, as a percentage of the total number of profiles.
          # Having a minimum number of samples helps improve the quality of the model if the POI is already very low after the initial samples.
          - name: BAYESIAN_OPT_MIN_SAMPLES_PERCENT
            value: '0.1'

          # The maximum number of samples that will be collected by BO, as a percentage of the total number of profiles.
          - name: BAYESIAN_OPT_MAX_SAMPLES_PERCENT
            value: '0.4'

          # The xi hyperparameter for BO.
          # Lower values favor exploitation (i.e., focussing on more knows ranges).
          # Higher values favor exploration (i.e., exploring unknown ranges).
          - name: BAYESIAN_OPT_XI
            value: '0.01'

          # If the BO returns a probability of improvement below this threshold, profiling for the respective input size is marked as complete.
          - name: BAYESIAN_OPT_POI_THRESHOLD
            value: '0.02'

      - name: bayesian-optimizer
        image: bayesian-optimizer:latest
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
        ports:
          - containerPort: 9000

      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
