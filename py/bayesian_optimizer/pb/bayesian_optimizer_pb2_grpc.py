# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bayesian_optimizer_pb2 as bayesian__optimizer__pb2


class BayesianOptimizerServiceStub(object):
    """A service for utilizing a BO model.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBoModel = channel.unary_unary(
                '/bayesianopt.BayesianOptimizerService/CreateBoModel',
                request_serializer=bayesian__optimizer__pb2.BoModelInitData.SerializeToString,
                response_deserializer=bayesian__optimizer__pb2.BoModelId.FromString,
                )
        self.GetBoSuggestion = channel.unary_unary(
                '/bayesianopt.BayesianOptimizerService/GetBoSuggestion',
                request_serializer=bayesian__optimizer__pb2.GetBoSuggestionRequest.SerializeToString,
                response_deserializer=bayesian__optimizer__pb2.GetBoSuggestionResponse.FromString,
                )
        self.InferY = channel.unary_unary(
                '/bayesianopt.BayesianOptimizerService/InferY',
                request_serializer=bayesian__optimizer__pb2.InferYRequest.SerializeToString,
                response_deserializer=bayesian__optimizer__pb2.InferYResponse.FromString,
                )
        self.DeleteBoModel = channel.unary_unary(
                '/bayesianopt.BayesianOptimizerService/DeleteBoModel',
                request_serializer=bayesian__optimizer__pb2.BoModelId.SerializeToString,
                response_deserializer=bayesian__optimizer__pb2.BoModelId.FromString,
                )


class BayesianOptimizerServiceServicer(object):
    """A service for utilizing a BO model.
    """

    def CreateBoModel(self, request, context):
        """Creates a new BO model and returns its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBoSuggestion(self, request, context):
        """Requests a suggestion for the next X value to explore, optionally supplying an observation from the previous profiling run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InferY(self, request, context):
        """Requests an inference of Y for a specific X.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBoModel(self, request, context):
        """Delete the specified model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BayesianOptimizerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBoModel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBoModel,
                    request_deserializer=bayesian__optimizer__pb2.BoModelInitData.FromString,
                    response_serializer=bayesian__optimizer__pb2.BoModelId.SerializeToString,
            ),
            'GetBoSuggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBoSuggestion,
                    request_deserializer=bayesian__optimizer__pb2.GetBoSuggestionRequest.FromString,
                    response_serializer=bayesian__optimizer__pb2.GetBoSuggestionResponse.SerializeToString,
            ),
            'InferY': grpc.unary_unary_rpc_method_handler(
                    servicer.InferY,
                    request_deserializer=bayesian__optimizer__pb2.InferYRequest.FromString,
                    response_serializer=bayesian__optimizer__pb2.InferYResponse.SerializeToString,
            ),
            'DeleteBoModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBoModel,
                    request_deserializer=bayesian__optimizer__pb2.BoModelId.FromString,
                    response_serializer=bayesian__optimizer__pb2.BoModelId.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bayesianopt.BayesianOptimizerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BayesianOptimizerService(object):
    """A service for utilizing a BO model.
    """

    @staticmethod
    def CreateBoModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bayesianopt.BayesianOptimizerService/CreateBoModel',
            bayesian__optimizer__pb2.BoModelInitData.SerializeToString,
            bayesian__optimizer__pb2.BoModelId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBoSuggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bayesianopt.BayesianOptimizerService/GetBoSuggestion',
            bayesian__optimizer__pb2.GetBoSuggestionRequest.SerializeToString,
            bayesian__optimizer__pb2.GetBoSuggestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InferY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bayesianopt.BayesianOptimizerService/InferY',
            bayesian__optimizer__pb2.InferYRequest.SerializeToString,
            bayesian__optimizer__pb2.InferYResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBoModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bayesianopt.BayesianOptimizerService/DeleteBoModel',
            bayesian__optimizer__pb2.BoModelId.SerializeToString,
            bayesian__optimizer__pb2.BoModelId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
